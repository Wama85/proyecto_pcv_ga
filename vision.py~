import cv2
import numpy as np

def load_image(path):
    img = cv2.imread(path)
    if img is None:
        raise FileNotFoundError(f"No se encontró la imagen: {path}")
    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

def detect_face_landmarks(img):
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    if len(faces) == 0:
        # Si no detecta rostro, trabaja con toda la imagen
        return (0, 0, img.shape[1], img.shape[0])
    return faces[0]  # (x, y, w, h)

def apply_transformations(img, params):
    wrinkle, desaturation, fade_color, edge_strength = params
    img2 = img.copy()

    x, y, w, h = detect_face_landmarks(img2)
    face = img2[y:y+h, x:x+w]

    # --- 1️⃣ Colores más viejos (tono amarillento) ---
    b, g, r = cv2.split(face)
    r = cv2.add(r, fade_color * 50)   # más rojizo
    g = cv2.add(g, fade_color * 30)   # menos verde
    b = cv2.subtract(b, fade_color * 40)  # más cálido
    face = cv2.merge([b, g, r])
    face = np.clip(face, 0, 255).astype(np.uint8)

    # --- 2️⃣ Reducir saturación (colores gastados) ---
    hsv = cv2.cvtColor(face, cv2.COLOR_RGB2HSV).astype(np.float32)
    hsv[..., 1] *= (1 - desaturation * 1.2)
    hsv[..., 2] *= (1 - fade_color * 0.8)
    hsv = np.clip(hsv, 0, 255)
    face = cv2.cvtColor(np.uint8(hsv), cv2.COLOR_HSV2RGB)

    # --- 3️⃣ Añadir ruido (textura de papel viejo) ---
    noise = np.random.normal(0, wrinkle * 80, face.shape).astype(np.int16)
    face = np.clip(face + noise, 0, 255).astype(np.uint8)

    # --- 4️⃣ Bordes oscuros y grietas simuladas ---
    gray = cv2.cvtColor(face, cv2.COLOR_RGB2GRAY)
    edges = cv2.Canny(gray, 80, 160)
    edges = cv2.dilate(edges, None, iterations=int(edge_strength * 3) + 1)
    cracks = np.zeros_like(face)
    cracks[edges > 0] = [40, 40, 40]  # líneas de grietas
    face = cv2.addWeighted(face, 1, cracks, 0.5, 0)

    # --- 5️⃣ Desgaste del papel (viñeta oscura) ---
    mask = np.zeros(face.shape[:2], dtype=np.uint8)
    cv2.circle(mask, (w//2, h//2), int(min(w, h) * 0.45), 255, -1)
    mask = cv2.GaussianBlur(mask, (101, 101), 0)
    vignette = cv2.merge([mask, mask, mask]) / 255.0
    face = (face * vignette + 40 * (1 - vignette)).astype(np.uint8)

    # Reemplazar rostro modificado
    img2[y:y+h, x:x+w] = face
    return img2
